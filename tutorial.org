#+TITLE: Orient Tutorial
#+OPTIONS: author:nil creator:nil timestamp:nil
#+SETUPFILE: theme-readtheorg.setup
For a (possibly) better reading experience, try the [[https://filecoin-project.github.io/orient/tutorial.html][HTML site]].

[[https://github.com/filecoin-project/orient][Orient]] is implemented in [[http://www.lispworks.com/documentation/HyperSpec/Front/][Common Lisp]]. This tutorial won't teach you that, but if you follow the examples you should be
able to pick up the basics pretty quickly.

* Relational Data
First, load Orient:
#+BEGIN_SRC lisp
(asdf:load-system :orient)
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :package orient :exports results :results raw :var timestamp=(format-time-string "[%F %r]: ")
  (format t "~A Using commit ~A" timestamp (project-commit-link :org))
#+END_SRC

#+RESULTS:
[2019-08-15 06:25:17 PM]:  Using commit [[https://github.com/filecoin-project/orient/commit/78089b6d3bf72429a18a56ab23f03ab88893f256
][78089b6d3bf72429a18a56ab23f03ab88893f256
]]


For this tutorial, we will work in the =SCRATCH= package.
#+BEGIN_SRC lisp :exports both
(in-package scratch)
#+END_SRC

Orient works on relational data, so we need to create and manipulate it. We can construct a tuple like this:
#+BEGIN_SRC lisp :package scratch :exports both
(tuple (a 1) (b 2))
#+END_SRC

#+RESULTS:
: #{| (A 1) (B 2) |}

In this tutorial, we will use =ISETQ= (interactive =SETQ=) for convenience to define top-level variables.
#+BEGIN_SRC lisp :package scratch :exports both
(isetq t1 (tuple (a 1) (b 2)))
#+END_SRC

#+RESULTS:
: #{| (A 1) (B 2) |}

Extract values from tuples with =TREF=.

#+BEGIN_SRC lisp :package scratch :exports both
(tref 'b t1)
#+END_SRC

#+RESULTS:
: 2

=TREF= also defines a place we can =SETF=.

#+BEGIN_SRC lisp :package scratch :exports both
(setf (tref 'a t1) 9)

t1
#+END_SRC

#+RESULTS:
: #{| (A 9) (B 2) |}

For convenience, you can also use the =WITH-ATTRIBUTES= macro.

#+BEGIN_SRC lisp :package scratch :exports both
  (with-attributes (a b) t1
     (+ b a))
#+END_SRC

#+RESULTS:
: 11

And this also allows you to set (=SETQ= or =SETF= both work).
#+BEGIN_SRC lisp :package scratch :exports both
  (with-attributes (a b) t1
    (setq b 3))

  t1
#+END_SRC

#+RESULTS:
: #{| (A 9) (B 3) |}

A relation is a /set/ of tuples. (There is not yet any concept of 'key', so all attributes together constitute the key.) There is
a convenient syntax for creating relations.

#+BEGIN_SRC lisp :package orient.scratch :exports both
  (isetq r1 (relation (a b c)
                      (1 2 3)
                      (4 5 6)
                      (7 8 9)))
#+END_SRC

#+RESULTS:
: #<RELATION #[ A B C ] #{
:                         #{| (A 1) (B 2) (C 3) |}
:                         #{| (A 4) (B 5) (C 6) |}
:                         #{| (A 7) (B 8) (C 9) |} }>

We can also create a relation from constituent tuples. Note that one tuple (=T1=) is deduplicated.

#+BEGIN_SRC lisp :package scratch :exports both
(isetq r2 (make-relation (list t1 (tuple (a 3) (b 8)) (tuple (a 7) (b 8)) t1)))
#+END_SRC

#+RESULTS:
: #<RELATION #[ A B ] #{
:                       #{| (A 3) (B 8) |}
:                       #{| (A 7) (B 8) |}
:                       #{| (A 9) (B 3) |} }>


We can get a relation's cardinality.
#+BEGIN_SRC lisp :package scratch :exports both
(cardinality r1)
#+END_SRC

#+RESULTS:
: 3

And its attributes.
#+BEGIN_SRC lisp :package scratch :exports both
(attributes r1)
#+END_SRC

#+RESULTS:
: #{ A B C }

Tuples have attributes too.
#+BEGIN_SRC lisp :package scratch :exports both
(attributes t1)
#+END_SRC

#+RESULTS:
: #{ A B }

You can join tuples and relations with =JOIN= (which implements a 'natural join'). This concatenates tuples with
matching attributes from either of its arguments.
#+BEGIN_SRC lisp :package scratch :exports both
(join r1 r2)
#+END_SRC

#+RESULTS:
: #<RELATION #[ A B C ] #{ #{| (A 7) (B 8) (C 9) |} }>

Joining a tuple with a relation lets you select a subset of its tuples.
#+BEGIN_SRC lisp :package scratch :exports both
(join (tuple (b 8)) r2)
#+END_SRC

#+RESULTS:
: #<RELATION #[ A B ] #{ #{| (A 3) (B 8) |} #{| (A 7) (B 8) |} }>

No shared attributes:
#+BEGIN_SRC lisp :package scratch :exports both
(join (tuple (a 1)) (tuple (b 2)))
#+END_SRC

#+RESULTS:
: #{| (A 1) (B 2) |}

No match:
#+BEGIN_SRC lisp :package scratch :exports both
(join (tuple (a 1)) (tuple (a 2)))
#+END_SRC

#+RESULTS:
: NIL

Cartesian product:
#+BEGIN_SRC lisp :package scratch :exports both
  (join (relation (a) (1) (2) (3)) (relation (b) (1) (2) (3)))
#+END_SRC

#+RESULTS:
#+begin_example
#<RELATION #[ A B ] #{
                      #{| (A 1) (B 1) |}
                      #{| (A 1) (B 2) |}
                      #{| (A 1) (B 3) |}
                      #{| (A 2) (B 1) |}
                      #{| (A 2) (B 2) |}
                      #{| (A 2) (B 3) |}
                      #{| (A 3) (B 1) |}
                      #{| (A 3) (B 2) |}
                      #{| (A 3) (B 3) |} }>
#+end_example

** What about the rest of relational algebra?

More is available, but not all or most yet. See [[https://github.com/filecoin-project/orient/blob/master/base/relation.lisp][source]] for details.

For now, only what has been needed for Orient is implemented. The rest will be naturally built out over time.

Now move on to the [[Orient][Orient]] section of this tutorial.

* Orient Basics
This section of the tutorial will show you Orient basics. If you haven't looked at the [[Relational Data][Relational Data]] section yet, some
things might be hard to follow, so if you get lost consider backtracking.

Orient uses schemas to define parameters. For now, these only associate descriptions, but types and units will be supported in the future.
#+BEGIN_SRC lisp :package scratch :exports both
  (defschema woozleton "Where the Woozles live."
    (population "How many (Woozle) people live here?")
    (men "How many men in town?")
    (women "How many women in town?")
    (adults "How many adults in town?")
    (children "How many children in town?")
    (pets "How many pets are there?")
    (pets-per-child "How many pets does each child have?"))
)
#+END_SRC

#+RESULTS:
: #<SCHEMA {1006C75D53}>

Before we perform any calculation, we need to define the relationship between variables. In this case, we will define
=ADULTS= as the sum of =MEN= and =WOMEN=; and =POPULATION= as the sum of =ADULTS= and =CHILDREN=. =PETS= is the product
of =CHILDREN= and =PETS-PER-CHILD=.
#+BEGIN_SRC lisp :package scratch :exports both
    (defconstraint-system woozle-population
        ((adults (+ men women))
         (population (+ adults children))
         (pets (* children pets-per-child))))
#+END_SRC

#+RESULTS:
#+begin_example
#<SYSTEM (:COMPONENTS
          ((COMPONENT ((TRANSFORMATION (SIG #{
                                              MEN
                                              WOMEN } -> #{
                                                           ADULTS }) === "FN()")
                       (TRANSFORMATION (SIG #{
                                              MEN
                                              ADULTS } -> #{
                                                            WOMEN }) === "FN()")
                       (TRANSFORMATION (SIG #{
                                              WOMEN
                                              ADULTS } -> #{
                                                            MEN }) === "FN()")))
           (COMPONENT ((TRANSFORMATION (SIG #{
                                              ADULTS
                                              CHILDREN } -> #{
                                                              POPULATION }) === "FN()")
                       (TRANSFORMATION (SIG #{
                                              ADULTS
                                              POPULATION } -> #{
                                                                CHILDREN }) === "FN()")
                       (TRANSFORMATION (SIG #{
                                              CHILDREN
                                              POPULATION } -> #{
                                                                ADULTS }) === "FN()")))
           (COMPONENT ((TRANSFORMATION (SIG #{
                                              CHILDREN
                                              PETS-PER-CHILD } -> #{
                                                                    PETS }) === "FN()")
                       (TRANSFORMATION (SIG #{
                                              PETS
                                              CHILDREN } -> #{
                                                              PETS-PER-CHILD }) === "FN()")
                       (TRANSFORMATION (SIG #{
                                              PETS
                                              PETS-PER-CHILD } -> #{
                                                                    CHILDREN }) === "FN()"))))
          :SUBSYSTEMS NIL :SCHEMA NIL :DATA NIL)>
#+end_example

The resulting system contains transformations for deriving parameters from each other, when possible.

Now that we have defined the relationship between parameters, we can use the convenience function, =ASK= to ask
questions. =ASK= takes a system, a list of target attributes, and input data. If Orient can find a solution it will be
returned.

Let's calculate =POPULATION= and =ADULTS=.
#+BEGIN_SRC lisp :package scratch :exports both
   (ask (find-system 'woozle-population)
        '(population adults)
        (tuple (men 10) (women 11) (children 5)))
#+END_SRC

#+RESULTS:
: #{| (ADULTS 21) (POPULATION 26) |}


#+BEGIN_SRC lisp :package scratch :exports both
  (ask (find-system 'woozle-population)
       '(children)
       (tuple (men 10) (women 11) (population 100)))
#+END_SRC

#+RESULTS:
: #{| (CHILDREN 79) |}

What if we know the population and number of adults but not how many men and children there are?
#+BEGIN_SRC lisp :package scratch :exports both
  (ask (find-system 'woozle-population)
       '(men children)
       (tuple (women 11) (adults 25) (population 100)))
#+END_SRC

#+RESULTS:
: #{| (MEN 14) (CHILDREN 75) |}

Remember, Orient is relational, so our input can be a relation and so can the output. Here we join a relation
containing a number of different populations with a tuple containing the (constant) numbers of women and adults. And in
order to make our results more legible, we ask for the population too.
#+BEGIN_SRC lisp :package scratch :exports both
  (ask (find-system 'woozle-population)
       '(population children)
       (join (relation (population)
                       (30)
                       (50)
                       (100)
                       (200))
             (tuple (women 11) (adults 25))))
#+END_SRC

#+RESULTS:
: #<RELATION #[ CHILDREN POPULATION ] #{
:                                       #{| (CHILDREN 5) (POPULATION 30) |}
:                                       #{| (CHILDREN 25) (POPULATION 50) |}
:                                       #{| (CHILDREN 75) (POPULATION 100) |}
:                                       #{| (CHILDREN 175) (POPULATION 200) |} }>

If we want more information about the solution, we can use =SOLVE-FOR=. =SOLVE-FOR= returns the whole solution and
doesn't project just the requested attributes like =ASK= does.

It also returns some other values: the =PLAN=, an optional =REPORT= (which we didn't request here), and the
=initial-data= (which might have been assembled in a more complex way than in this example).
#+BEGIN_SRC lisp :package scratch :exports both
  (solve-for (find-system 'woozle-population) '(population children) (join (tuple (population 50)) (tuple (women 11) (adults 25))))
#+END_SRC

#+RESULTS:
: #{| (MEN 14) (WOMEN 11) (ADULTS 25) (CHILDREN 25) (POPULATION 50) |}
: ((TRANSFORMATION (SIG #{ WOMEN ADULTS } -> #{ MEN }) === "FN()")
:  (TRANSFORMATION (SIG #{ ADULTS POPULATION } -> #{ CHILDREN }) === "FN()"))
: ""
: #{| (WOMEN 11) (ADULTS 25) (POPULATION 50) |}

Notice that we see the solved values for all attributes.

The list of transformations below is the plan. In this example, see that Orient first calculates =MEN= from =WOMEN= and
=ADULTS=, then calculate =CHILDREN= from =ADULTS= and =POPULATION=.

Finally, we see the input tuple itself.

The output is a bit hard to read, since multiple values are jammed up together, so let's look at another example which
binds each value to a variable and stores the results. We will also use the most general function, =SOLVE= instead of
the often-more-conveneitn =SOLVE-FOR=.

This introduces the new concept of a /signature/, created below with =SIG=. We solve /problems/ over /systems/. (/Problems/
have the same shape as simple /signatures/, so we use /signatures/ here for now. This will change in the future, since the
overloading of /signature/ can be confusing. We mention it here to hopefully reduce that confusion but realize the
opposite effect may have been accomplished.)

#+BEGIN_SRC lisp :package scratch :exports both
  (multiple-value-bind (result plan report initial-values)
      (solve (find-system 'woozle-population) 
             (sig (men women children) -> (adults))
             (tuple (men 10) (women 11) (children 5)))

    (isetq res1 result)
    (isetq plan1 plan)
    (isetq report1 report)
    res1)
#+END_SRC

#+RESULTS:
: #{| (MEN 10) (WOMEN 11) (ADULTS 21) (CHILDREN 5) (POPULATION 26) |}

The results.

#+BEGIN_SRC lisp :package scratch :exports both
plan1
#+END_SRC

#+RESULTS:
: ((TRANSFORMATION (SIG #{ MEN WOMEN } -> #{ ADULTS }) === "FN()")
:  (TRANSFORMATION (SIG #{ ADULTS CHILDREN } -> #{ POPULATION }) === "FN()"))

The plan.

And here is another way to create a signature, without the convenience macro, =SIG=. We compare the two results using
=SAME= which is generally aware of Orient's domain object equality and is useful when writing tests.
#+BEGIN_SRC lisp :package scratch :exports both
  (same (make-signature '(men women children) '(adults))
        (sig (men women children) -> (adults)))
#+END_SRC

#+RESULTS:
: T

And, just to show a slightly more complex example, let's not forget the pets!
#+BEGIN_SRC lisp :package scratch :exports both
(ask (find-system 'woozle-population)
 '(men children pets) (tuple (women 11) (adults 25) (population 100) (pets-per-child 3)))
#+END_SRC

#+RESULTS:
: #{| (MEN 14) (PETS 225) (CHILDREN 75) |}

We can still calculate in different directions, too.

#+BEGIN_SRC lisp :package scratch :exports both
  (ask (find-system 'woozle-population)
       '(children pets-per-child)
       (tuple (women 11) (men 17) (population 100) (pets 200.0)))
#+END_SRC

#+RESULTS:
: #{| (CHILDREN 72) (PETS-PER-CHILD 2.7777777) |}

But if we ask a question that can't be solved, we're out of luck.
#+BEGIN_SRC lisp :package scratch :exports both
  (ask (find-system 'woozle-population)
       '(men children)
       (tuple (women 11) (adults 25) (population 100) (pets-per-child 3) (pets 200)))
#+END_SRC

#+RESULTS:
: NIL

